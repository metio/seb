<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Sebastian Hoß</title><link>https://seb.xn--ho-hia.de/</link><description>Recent content on Sebastian Hoß</description><generator>Hugo</generator><language>en</language><atom:link href="https://seb.xn--ho-hia.de/index.xml" rel="self" type="application/rss+xml"/><item><title>jspecify</title><link>https://seb.xn--ho-hia.de/posts/jspecify/</link><pubDate>Mon, 09 Jan 2023 00:00:00 +0000</pubDate><guid>https://seb.xn--ho-hia.de/posts/jspecify/</guid><description>Every Java developer has probably encountered a NullPointerException at least once in their life. The exception is thrown every time you try to dereference and use some object before initializing it. The following snippet shows a simple example:
String someName; // value is &amp;#39;null&amp;#39; someName.toUpperCase(); // throws NullPointerException Modern IDEs have some sort of detection for this kind of problem and warn developers while they are writing code like this. Those IDEs typically rely on static code analysis to determine if a value is null and therefore a potential for a NullPointerException is present in your code.</description></item><item><title>Using chezmoi with age</title><link>https://seb.xn--ho-hia.de/posts/chezmoi-age/</link><pubDate>Sun, 08 Jan 2023 00:00:00 +0000</pubDate><guid>https://seb.xn--ho-hia.de/posts/chezmoi-age/</guid><description>age is another tool supported by chezmoi to keep data private. Compared to gpg it is much simpler by focusing on the encryption parts only.
Add the following snippet to your .chezmoi.toml to configure chezmoi to use age:
encryption = &amp;#34;age&amp;#34; [age] identity = &amp;#34;path/to/age/private-key&amp;#34; recipient = &amp;#34;age...public...key...&amp;#34; Adding files to your chezmoi source directory remains the same as compared to using gpg - just call chezmoi add --encrypt path/to/file.</description></item><item><title>Multiple Git Configurations</title><link>https://seb.xn--ho-hia.de/posts/multiple-git-configs/</link><pubDate>Thu, 05 Jan 2023 00:00:00 +0000</pubDate><guid>https://seb.xn--ho-hia.de/posts/multiple-git-configs/</guid><description>To split yet re-use as much configuration for Git as possible, you can create one root configuration that looks similar to this:
[user] name = Your Name Here [includeIf &amp;#34;gitdir:~/git/personal/&amp;#34;] path = ~/.config/git/personal [includeIf &amp;#34;gitdir:~/git/work/&amp;#34;] path = ~/.config/git/work The includeIf directive supports multiple keywords. In my case, work and personal projects have a different root directory, therefore I can filter based on the location using gitdir. The personal Git configuration simply looks like this:</description></item><item><title>passage fuzzy search</title><link>https://seb.xn--ho-hia.de/posts/passage-fuzzy-search/</link><pubDate>Tue, 27 Dec 2022 00:00:00 +0000</pubDate><guid>https://seb.xn--ho-hia.de/posts/passage-fuzzy-search/</guid><description>To fuzzy search through passwords managed with passage, I&amp;rsquo;ve written the following script that is inspired by the upstream version which is using fzf.
fd --type=file --base-directory=&amp;#34;${PASSAGE_DIR:-${HOME}/.passage/store}&amp;#34; .age --exec echo &amp;#39;{.}&amp;#39; | \ sk --cycle --layout=reverse --tiebreak=score --no-multi | \ xargs --replace --max-args=1 --no-run-if-empty \ passage show --clip=1 {} This version requires fd, skim, xargs, and passage itself of course. The detailed breakdown on how it works is as follows:</description></item><item><title>chezmoi auto-update</title><link>https://seb.xn--ho-hia.de/posts/chezmoi-auto-update/</link><pubDate>Mon, 26 Dec 2022 00:00:00 +0000</pubDate><guid>https://seb.xn--ho-hia.de/posts/chezmoi-auto-update/</guid><description>To automatically synchronize dotfiles across my computers, I&amp;rsquo;ve written the following systemd unit:
[Unit] Description=Update chezmoi managed dotfiles After=network-online.target Wants=network-online.target [Service] Type=oneshot ExecStart=/usr/bin/chezmoi update --no-tty --force RemainAfterExit=false [Install] WantedBy=default.target This unit pulls changes from upstream first and then applies the changes to the current computer after I&amp;rsquo;m logged in and a network connection is available. The --no-tty flag is required because there is no tty when systemd executes chezmoi. Likewise, the --force flag ensures that no interactive prompt will be displayed which we cannot answer since systemd is executing this unit without us being involved.</description></item><item><title>chezmoi &amp; shell init scripts</title><link>https://seb.xn--ho-hia.de/posts/shell-init/</link><pubDate>Mon, 12 Dec 2022 00:00:00 +0000</pubDate><guid>https://seb.xn--ho-hia.de/posts/shell-init/</guid><description>Many CLI applications offer initialization scripts to integrate into a shell, for example starship init zsh or zoxide init zsh. The documentation of these tools usually tell you to put something like eval &amp;quot;$(starship init zsh)&amp;quot; into your shell RC file. While this approach works fine, it does decrease startup speed of your shell because it needs to run the init command every time you open a new shell. Given that you open shells much more often than new versions of these tools are released and installed, you can cache the output of these commands to get a bit of speed back.</description></item><item><title>awsenv</title><link>https://seb.xn--ho-hia.de/posts/awsenv/</link><pubDate>Mon, 14 Feb 2022 00:00:00 +0000</pubDate><guid>https://seb.xn--ho-hia.de/posts/awsenv/</guid><description>To quickly log into and switch between AWS accounts in a terminal, I wrote the following script. It sets the AWS_PROFILE environment variable which is used by many tools that interact with the AWS API, like awscli or terraform. My current environment uses AzureAD as a single-sign-on provider, therefore this script uses aws sso login to perform an MFA login into AWS. The AWS profiles must be set up in such a way that aws configure list-profiles can detect them, which is typically done by adding them in ${AWS_CONFIG_FILE:-$HOME/.</description></item><item><title>Clojure Java Interoperability</title><link>https://seb.xn--ho-hia.de/posts/clojure-java-interoperability/</link><pubDate>Sat, 29 Jan 2022 00:00:00 +0000</pubDate><guid>https://seb.xn--ho-hia.de/posts/clojure-java-interoperability/</guid><description>Clojure has several forms and macros to call Java code. However, calling Clojure code from Java is not always so straightforward. The following post shows the different options currently available.
Using gen-class Clojure code can be compiled to standard JVM bytecode using gen-class.
Adding static modifiers Clojure imposes the concept of immutability. As such Clojure functions are/should be void of any state or side effects and only operate on the given input.</description></item><item><title>Declarative conditional rendering in React</title><link>https://seb.xn--ho-hia.de/posts/declarative-conditional-rendering-in-react/</link><pubDate>Sat, 15 Jan 2022 00:00:00 +0000</pubDate><guid>https://seb.xn--ho-hia.de/posts/declarative-conditional-rendering-in-react/</guid><description>One feature that often surprises people while teaching them React is that a component does not have to render anything. It seems trivial at first, however it quickly shows that a render-nothing components can reduce boilerplate code and improve code-reuse.
In its simplest (shortest) form a render-nothing component looks like the following snippet. It does not actually do anything and is not particularly helpful for anything. You could add it to every other component in your application without breaking or influencing anything.</description></item><item><title>Proper hostnames in your local network</title><link>https://seb.xn--ho-hia.de/posts/home-network-hostnames/</link><pubDate>Sat, 08 Jan 2022 00:00:00 +0000</pubDate><guid>https://seb.xn--ho-hia.de/posts/home-network-hostnames/</guid><description>Thanks to RFC 8375, we now have a proper domain to use for all our local devices. Simply move everything underneath .home.arpa to join the fun. In case you have hostnamectl available on your system run the following command to change the hostname of a device:
# set hostname $ hostnamectl hostname some-device.home.arpa # check hostname $ hostnamectl status</description></item><item><title>Automatically update plugins for vim/nvim</title><link>https://seb.xn--ho-hia.de/posts/nvim-plugin-auto-updates/</link><pubDate>Sat, 01 Jan 2022 00:00:00 +0000</pubDate><guid>https://seb.xn--ho-hia.de/posts/nvim-plugin-auto-updates/</guid><description>Both Vim and Neovim have a built-in plugin mechanism that loads plugins from ~/.vim/pack/*/{start,opt}/* (Vim) or ~/.local/share/nvim/site/pack/*/{start,opt}/* (Neovim). All you have to do to install new plugins, is to git clone their repository into those directories. To automatically update those clones, create the following script:
#!/usr/bin/env zsh ############################################################################### # This script git-pulls all installed nvim plugins which are using the built-in # nvim plugin manager. Those plugins are located in .</description></item><item><title>Manage tmux sessions with tmuxp</title><link>https://seb.xn--ho-hia.de/posts/tmux-tmuxp/</link><pubDate>Mon, 20 Dec 2021 00:00:00 +0000</pubDate><guid>https://seb.xn--ho-hia.de/posts/tmux-tmuxp/</guid><description>To manage tmux sessions, I like to use tmuxp. It works by having pre-defined sessions in ~/.config/tmuxp which looks like this:
session_name: cool-app start_directory: ~/projects/cool-app windows: - window_name: backend start_directory: backend - window_name: frontend start_directory: frontend In case the name of the file is cool-app.yaml, you can open the sessions with tmuxp load cool-app --yes.</description></item><item><title>Continuous Versioning with Maven</title><link>https://seb.xn--ho-hia.de/posts/maven-cd-versioning/</link><pubDate>Mon, 06 Dec 2021 00:00:00 +0000</pubDate><guid>https://seb.xn--ho-hia.de/posts/maven-cd-versioning/</guid><description>To automatically version Maven projects, I like to use the m-versions-p like this:
$ mvn versions:set -DnewVersion=my.new.version -DgenerateBackupPoms=false This will update the version property of every module in the reactor to prepare them for the next release. In case you are using GitHub Actions, consider using a timestamp.</description></item><item><title>GitHub Packages with Maven</title><link>https://seb.xn--ho-hia.de/posts/github-maven-packages/</link><pubDate>Mon, 22 Nov 2021 00:00:00 +0000</pubDate><guid>https://seb.xn--ho-hia.de/posts/github-maven-packages/</guid><description>GitHub Packages can be used to host Maven packages with the following configuration in your ~/.m2/settings.xml:
&amp;lt;settings&amp;gt; &amp;lt;profiles&amp;gt; &amp;lt;profile&amp;gt; &amp;lt;id&amp;gt;github&amp;lt;/id&amp;gt; &amp;lt;repositories&amp;gt; &amp;lt;repository&amp;gt; &amp;lt;id&amp;gt;maven-build-process&amp;lt;/id&amp;gt; &amp;lt;name&amp;gt;GitHub maven-build-process Apache Maven Packages&amp;lt;/name&amp;gt; &amp;lt;url&amp;gt;https://maven.pkg.github.com/metio/maven-build-process&amp;lt;/url&amp;gt; &amp;lt;releases&amp;gt; &amp;lt;enabled&amp;gt;true&amp;lt;/enabled&amp;gt; &amp;lt;/releases&amp;gt; &amp;lt;snapshots&amp;gt; &amp;lt;enabled&amp;gt;true&amp;lt;/enabled&amp;gt; &amp;lt;/snapshots&amp;gt; &amp;lt;/repository&amp;gt; &amp;lt;repository&amp;gt; &amp;lt;id&amp;gt;hcf4j&amp;lt;/id&amp;gt; &amp;lt;name&amp;gt;GitHub hcf4j Apache Maven Packages&amp;lt;/name&amp;gt; &amp;lt;url&amp;gt;https://maven.pkg.github.com/metio/hcf4j&amp;lt;/url&amp;gt; &amp;lt;releases&amp;gt; &amp;lt;enabled&amp;gt;true&amp;lt;/enabled&amp;gt; &amp;lt;/releases&amp;gt; &amp;lt;snapshots&amp;gt; &amp;lt;enabled&amp;gt;true&amp;lt;/enabled&amp;gt; &amp;lt;/snapshots&amp;gt; &amp;lt;/repository&amp;gt; &amp;lt;/repositories&amp;gt; &amp;lt;/profile&amp;gt; &amp;lt;/profiles&amp;gt; &amp;lt;servers&amp;gt; &amp;lt;server&amp;gt; &amp;lt;id&amp;gt;maven-build-process&amp;lt;/id&amp;gt; &amp;lt;username&amp;gt;USERNAME&amp;lt;/username&amp;gt; &amp;lt;password&amp;gt;GITHUB_TOKEN&amp;lt;/password&amp;gt; &amp;lt;/server&amp;gt; &amp;lt;server&amp;gt; &amp;lt;id&amp;gt;hcf4j&amp;lt;/id&amp;gt; &amp;lt;username&amp;gt;USERNAME&amp;lt;/username&amp;gt; &amp;lt;password&amp;gt;GITHUB_TOKEN&amp;lt;/password&amp;gt; &amp;lt;/server&amp;gt; &amp;lt;/servers&amp;gt; &amp;lt;/settings&amp;gt; You will have to add another repository/server for each project you are fetching from GitHub.</description></item><item><title>Google Central</title><link>https://seb.xn--ho-hia.de/posts/maven-google-central/</link><pubDate>Mon, 08 Nov 2021 00:00:00 +0000</pubDate><guid>https://seb.xn--ho-hia.de/posts/maven-google-central/</guid><description>Some time ago, Google started hosting a copy of Maven Central. Configure it in your ~/.m2/settings.xml like this:
&amp;lt;settings&amp;gt; &amp;lt;mirrors&amp;gt; &amp;lt;mirror&amp;gt; &amp;lt;id&amp;gt;google-maven-central&amp;lt;/id&amp;gt; &amp;lt;name&amp;gt;Google Maven Central (Asia)&amp;lt;/name&amp;gt; &amp;lt;url&amp;gt;https://maven-central-asia.storage-download.googleapis.com/maven2/&amp;lt;/url&amp;gt; &amp;lt;mirrorOf&amp;gt;central&amp;lt;/mirrorOf&amp;gt; &amp;lt;/mirror&amp;gt; &amp;lt;mirror&amp;gt; &amp;lt;id&amp;gt;google-maven-central&amp;lt;/id&amp;gt; &amp;lt;name&amp;gt;Google Maven Central (EU)&amp;lt;/name&amp;gt; &amp;lt;url&amp;gt;https://maven-central-eu.storage-download.googleapis.com/maven2/&amp;lt;/url&amp;gt; &amp;lt;mirrorOf&amp;gt;central&amp;lt;/mirrorOf&amp;gt; &amp;lt;/mirror&amp;gt; &amp;lt;mirror&amp;gt; &amp;lt;id&amp;gt;google-maven-central&amp;lt;/id&amp;gt; &amp;lt;name&amp;gt;Google Maven Central (US)&amp;lt;/name&amp;gt; &amp;lt;url&amp;gt;https://maven-central.storage-download.googleapis.com/maven2/&amp;lt;/url&amp;gt; &amp;lt;mirrorOf&amp;gt;central&amp;lt;/mirrorOf&amp;gt; &amp;lt;/mirror&amp;gt; &amp;lt;/mirrors&amp;gt; &amp;lt;/settings&amp;gt; Pick the mirror nearest to your location to get best speeds.</description></item><item><title>Backups with emacs</title><link>https://seb.xn--ho-hia.de/posts/emacs-backups/</link><pubDate>Mon, 25 Oct 2021 00:00:00 +0000</pubDate><guid>https://seb.xn--ho-hia.de/posts/emacs-backups/</guid><description>emacs will create backups of your files by default. Those backups are located right next to the original file and are called &amp;lt;file&amp;gt;~. Unfortunately, emacs will not clean those up by default, which annoys me from time to time. Therefore, I&amp;rsquo;m now using the following configuration to keep those backups in a different folder:
(setq version-control t ;; Use version numbers for backups. kept-new-versions 10 ;; Number of newest versions to keep.</description></item><item><title>Maintaining dotfiles with chezmoi</title><link>https://seb.xn--ho-hia.de/posts/chezmoi-maintenance/</link><pubDate>Mon, 11 Oct 2021 00:00:00 +0000</pubDate><guid>https://seb.xn--ho-hia.de/posts/chezmoi-maintenance/</guid><description>To make it easier managing many dotfiles with chezmoi, a shell function similar to the one below can be used:
function m-dotfiles-ok { # public chezmoi add ~/.config/zsh --recursive chezmoi add ~/.config/sway --recursive chezmoi add ~/.config/tmux --recursive chezmoi add .... # secrets chezmoi add --encrypt ~/.config/npm/npmrc chezmoi add --encrypt ~/.ssh/id_rsa chezmoi add --encrypt ... } Whenever you feel happy with your current setup, just call m-dotfiles-ok to push changes into the chezmoi source directory.</description></item><item><title>Encrypt dotfiles with chezmoi</title><link>https://seb.xn--ho-hia.de/posts/chezmoi-gpg/</link><pubDate>Mon, 20 Sep 2021 00:00:00 +0000</pubDate><guid>https://seb.xn--ho-hia.de/posts/chezmoi-gpg/</guid><description>RECOMMENDATION: Use age instead of gpg.
chezmoi can use various external tools to keep data private. gpg is used by various other tools as well, so chances are that you already have a functional setup on your system. To configure gpg with chezmoi, just set yourself as the recipient like this:
[gpg] recipient = &amp;#34;your.name@example.com&amp;#34; Calling chezmoi add --encrypt /path/to/secret will now create encrypt the file with your public key which allows you to decrypt them later with your private key.</description></item><item><title>Manage dotfiles with chezmoi and git</title><link>https://seb.xn--ho-hia.de/posts/chezmoi-auto-git/</link><pubDate>Mon, 06 Sep 2021 00:00:00 +0000</pubDate><guid>https://seb.xn--ho-hia.de/posts/chezmoi-auto-git/</guid><description>chezmoi can automatically commit and push changes to your dotfiles into a (remote) Git repository. Enable it with the following snippet in your chezmoi.toml
[sourceVCS] autoCommit = true autoPush = true Every time you call chezmoi add /path/to/file will now create a new commit in your local chezmoi repository and push those changes into your configured remote repository.</description></item><item><title>Waybar on SwayWM</title><link>https://seb.xn--ho-hia.de/posts/sway-waybar/</link><pubDate>Mon, 23 Aug 2021 00:00:00 +0000</pubDate><guid>https://seb.xn--ho-hia.de/posts/sway-waybar/</guid><description>Waybar can be used as a status bar for SwayWM. You tell Sway to use it with the following snippet in your Sway configuration:
bar { swaybar_command waybar } Configure Waybar itself in ~/.config/waybar/config:
{ &amp;#34;layer&amp;#34;: &amp;#34;top&amp;#34;, &amp;#34;modules-left&amp;#34;: [&amp;#34;sway/workspaces&amp;#34;, &amp;#34;sway/mode&amp;#34;], &amp;#34;modules-center&amp;#34;: [&amp;#34;sway/window&amp;#34;], &amp;#34;modules-right&amp;#34;: [&amp;#34;clock&amp;#34;], &amp;#34;sway/window&amp;#34;: { &amp;#34;max-length&amp;#34;: 50 }, &amp;#34;clock&amp;#34;: { &amp;#34;format-alt&amp;#34;: &amp;#34;{:%a, %d. %b %H:%M}&amp;#34; } }</description></item><item><title>tmux Status Bar</title><link>https://seb.xn--ho-hia.de/posts/tmux-status-bar/</link><pubDate>Mon, 09 Aug 2021 00:00:00 +0000</pubDate><guid>https://seb.xn--ho-hia.de/posts/tmux-status-bar/</guid><description>To see the currently active tmux status bar configuration, call:
$ tmux show-options -g | grep status Change on of those values with in the current tmux session:
$ tmux set-option status-right &amp;#34;&amp;#34; Persist the change in your tmux.conf like this:
# disable right side of status bar set-option -g status-right &amp;#34;&amp;#34;</description></item><item><title>emacs and systemd</title><link>https://seb.xn--ho-hia.de/posts/emacs-systemd/</link><pubDate>Mon, 26 Jul 2021 00:00:00 +0000</pubDate><guid>https://seb.xn--ho-hia.de/posts/emacs-systemd/</guid><description>I like to use emacs to edit files in a terminal. It tends to start a little slow, therefore I&amp;rsquo;ve created a systemd unit to automatically start the emacs daemon and use aliases to connect to the running daemon. The unit looks like this:
[Unit] Description=Emacs text editor [%I] Documentation=info:emacs man:emacs(1) https://gnu.org/software/emacs/ [Service] Type=forking ExecStart=/usr/bin/emacs --daemon=%i ExecStop=/usr/bin/emacsclient --eval &amp;#34;(kill-emacs)&amp;#34; Environment=SSH_AUTH_SOCK=%t/keyring/ssh Restart=on-failure [Install] WantedBy=default.target Enable it with systemctl --user enable emacs@user and define any number of aliases to make connecting to the emacs daemon easier:</description></item><item><title>Push-only mirrors for Git Repositories</title><link>https://seb.xn--ho-hia.de/posts/git-push-only-mirror/</link><pubDate>Mon, 12 Jul 2021 00:00:00 +0000</pubDate><guid>https://seb.xn--ho-hia.de/posts/git-push-only-mirror/</guid><description>In case you want to have push-only mirrors for your Git repository, consider adding a special mirror remote like this:
$ git remote add mirrors DISABLED $ git remote set-url --add --push mirrors git@codeberg.org:org/repo.git $ git remote set-url --add --push mirrors git@gitlab.com:org/repo.git $ git remote set-url --add --push mirrors git@bitbucket.org:org/repo.git The above will create a new remote called mirrors which has no fetch URL and therefore can only be pushed:</description></item><item><title>Mirror Git Repositories</title><link>https://seb.xn--ho-hia.de/posts/git-mirror/</link><pubDate>Mon, 28 Jun 2021 00:00:00 +0000</pubDate><guid>https://seb.xn--ho-hia.de/posts/git-mirror/</guid><description>In case you want to make use of the decentralized nature of Git, consider using multiple push targets like this:
$ git remote set-url origin --push --add git@example.com/project.git $ git remote set-url origin --push --add git@another.com/project.git Note that the first call to set-url will overwrite an existing remote creating with git clone. Any additional call will actually recognize the --add option and add the new target to an existing remote.</description></item><item><title>Using multiple clusters with kubectl</title><link>https://seb.xn--ho-hia.de/posts/kubectl-multi-cluster/</link><pubDate>Mon, 14 Jun 2021 00:00:00 +0000</pubDate><guid>https://seb.xn--ho-hia.de/posts/kubectl-multi-cluster/</guid><description>To connect to multiple Kubernetes clusters with kubectl, I like to define aliases like this:
alias rancher=&amp;#34;kubectl --kubeconfig ~/.kube/rancher.config&amp;#34; alias work=&amp;#34;kubectl --kubeconfig ~/.kube/work.config&amp;#34; alias customer=&amp;#34;kubectl --kubeconfig ~/.kube/customer.config&amp;#34; Those aliases allow me to write things like rancher get pods --namespace some-namespace without worrying the wrong context is active. Using multiple configurations - one for each cluster - seems to be easier to manage since most clusters allow to download a ready-to-use configuration file.</description></item><item><title>Specify encoding for Maven projects</title><link>https://seb.xn--ho-hia.de/posts/maven-encoding/</link><pubDate>Mon, 31 May 2021 00:00:00 +0000</pubDate><guid>https://seb.xn--ho-hia.de/posts/maven-encoding/</guid><description>Maven projects by default use the file encoding of the operating system. This can be problematic in case different operating systems with different encoding settings are used to build the project. Specify the encoding of your source code and resource files as in the following snippets to fix that problem.
&amp;lt;properties&amp;gt; &amp;lt;project.build.sourceEncoding&amp;gt;UTF-8&amp;lt;/project.build.sourceEncoding&amp;gt; &amp;lt;project.reporting.outputEncoding&amp;gt;UTF-8&amp;lt;/project.reporting.outputEncoding&amp;gt; &amp;lt;/properties&amp;gt; Links https://maven.apache.org/pom.html#Properties</description></item><item><title>Creating reproducible artifacts with Maven</title><link>https://seb.xn--ho-hia.de/posts/maven-reproducible/</link><pubDate>Mon, 17 May 2021 00:00:00 +0000</pubDate><guid>https://seb.xn--ho-hia.de/posts/maven-reproducible/</guid><description>To create reproducible builds with Maven projects, it&amp;rsquo;s enough to specify the project.build.outputTimestamp property like this:
&amp;lt;properties&amp;gt; &amp;lt;project.build.outputTimestamp&amp;gt;2020&amp;lt;/project.build.outputTimestamp&amp;gt; &amp;lt;/properties&amp;gt; Links https://maven.apache.org/pom.html#Properties https://maven.apache.org/guides/mini/guide-reproducible-builds.html https://github.com/rodiontsev/maven-build-info-plugin https://github.com/phax/ph-buildinfo-maven-plugin https://github.com/Zlika/reproducible-build-maven-plugin</description></item><item><title>Analyze Maven projects with SonarCloud using GitHub Actions</title><link>https://seb.xn--ho-hia.de/posts/maven-github-sonarcloud/</link><pubDate>Mon, 03 May 2021 00:00:00 +0000</pubDate><guid>https://seb.xn--ho-hia.de/posts/maven-github-sonarcloud/</guid><description>To analyze Maven projects with SonarCloud using GitHub Actions, first create the following settings.xml file:
&amp;lt;settings xmlns=&amp;#34;http://maven.apache.org/SETTINGS/1.0.0&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xsi:schemaLocation=&amp;#34;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&amp;#34;&amp;gt; &amp;lt;pluginGroups&amp;gt; &amp;lt;pluginGroup&amp;gt;org.sonarsource.scanner.maven&amp;lt;/pluginGroup&amp;gt; &amp;lt;/pluginGroups&amp;gt; &amp;lt;activeProfiles&amp;gt; &amp;lt;activeProfile&amp;gt;sonar&amp;lt;/activeProfile&amp;gt; &amp;lt;/activeProfiles&amp;gt; &amp;lt;profiles&amp;gt; &amp;lt;profile&amp;gt; &amp;lt;id&amp;gt;sonar&amp;lt;/id&amp;gt; &amp;lt;properties&amp;gt; &amp;lt;sonar.host.url&amp;gt;https://sonarcloud.io&amp;lt;/sonar.host.url&amp;gt; &amp;lt;sonar.organization&amp;gt;YOUR_ORG&amp;lt;/sonar.organization&amp;gt; &amp;lt;sonar.projectKey&amp;gt;YOUR_PROJECT&amp;lt;/sonar.projectKey&amp;gt; &amp;lt;sonar.login&amp;gt;${env.SONAR_TOKEN}&amp;lt;/sonar.login&amp;gt; &amp;lt;/properties&amp;gt; &amp;lt;/profile&amp;gt; &amp;lt;/profiles&amp;gt; &amp;lt;/settings&amp;gt; Finally, add a step to your workflow:
- name: Verify Project run: mvn --settings $GITHUB_WORKSPACE/settings.xml verify sonar:sonar env: SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }} Links https://maven.apache.org/settings.html https://docs.sonarqube.org/latest/analysis/scan/sonarscanner-for-maven/</description></item><item><title>Use tmux as your login shell</title><link>https://seb.xn--ho-hia.de/posts/tmux-login-shell/</link><pubDate>Mon, 19 Apr 2021 00:00:00 +0000</pubDate><guid>https://seb.xn--ho-hia.de/posts/tmux-login-shell/</guid><description>To use tmux as your login shell, use chsh:
# list all available shells $ chsh --list-shells /bin/sh /bin/bash /sbin/nologin /usr/bin/sh /usr/bin/bash /usr/sbin/nologin /usr/bin/zsh /bin/zsh /usr/bin/tmux /bin/tmux # select login shell $ chsh --shell /usr/bin/tmux</description></item><item><title>Lock your screen on SwayWM</title><link>https://seb.xn--ho-hia.de/posts/sway-screenlock/</link><pubDate>Mon, 05 Apr 2021 00:00:00 +0000</pubDate><guid>https://seb.xn--ho-hia.de/posts/sway-screenlock/</guid><description>SwayWM users can use swaylock to lock their screen. Place the following key binding in your Sway configuration:
# lock your screen bindsym $mod+Ctrl+l exec swaylock --color 000000 $mod+Ctrl+l will lock your screen and turn it to black. The --color flag allows any color in the form of rrggbb[aa].</description></item><item><title>Peeking with tmux</title><link>https://seb.xn--ho-hia.de/posts/tmux-peek/</link><pubDate>Mon, 05 Apr 2021 00:00:00 +0000</pubDate><guid>https://seb.xn--ho-hia.de/posts/tmux-peek/</guid><description>tmux uses can use the following snippet to peek at files. Place it in your .bashrc or similar file.
peek() { tmux split-window -p 33 &amp;#34;$EDITOR&amp;#34; &amp;#34;$@&amp;#34; } Calling peek &amp;lt;file&amp;gt; will open &amp;lt;file&amp;gt; in lower third of tmux window.</description></item><item><title>Taken screenshots on SwayWM</title><link>https://seb.xn--ho-hia.de/posts/sway-screenshots/</link><pubDate>Mon, 22 Mar 2021 00:00:00 +0000</pubDate><guid>https://seb.xn--ho-hia.de/posts/sway-screenshots/</guid><description>SwayWM uses can use a mixture of grim and slurp to take screenshots of their desktop. Place the following key binding in your Sway configuration:
# take screenshot of currently focused screen bindsym $mod+Print exec /usr/bin/grim -o $(swaymsg -t get_outputs | jq -r &amp;#39;.[] | select(.focused) | .name&amp;#39;) $(xdg-user-dir PICTURES)/$(date +&amp;#39;%Y-%m-%d-%H%M%S.png&amp;#39;) # take screenshot of selection bindsym $mod+Shift+p exec /usr/bin/grim -g &amp;#34;$(/usr/bin/slurp)&amp;#34; $(xdg-user-dir PICTURES)/$(date +&amp;#39;%Y-%m-%d-%H%M%S.png&amp;#39;)</description></item><item><title>Executable READMEs</title><link>https://seb.xn--ho-hia.de/posts/makefile-readme/</link><pubDate>Mon, 08 Mar 2021 00:00:00 +0000</pubDate><guid>https://seb.xn--ho-hia.de/posts/makefile-readme/</guid><description>README file typically contain information about the project itself, for example how it can be installed/used/build. Most of the time these files contains command line instructions that users/contributors copy and paste into their terminal. Instead of doing that, consider placing a Makefile in the root of your project which contains the exact same instructions. Thanks to make, all your contributors can now use TAB-completion to run any of the pre-defined make targets.</description></item><item><title>Delay GitHub Actions builds</title><link>https://seb.xn--ho-hia.de/posts/github-actions-schedule-build/</link><pubDate>Mon, 22 Feb 2021 00:00:00 +0000</pubDate><guid>https://seb.xn--ho-hia.de/posts/github-actions-schedule-build/</guid><description>To delay the execution of an GitHub Action, use a mixture of the on: schedule: ... configuration, and a conditional build step.
name: &amp;lt;PIPELINE&amp;gt; on: schedule: - cron: &amp;#39;&amp;lt;CRON&amp;gt;&amp;#39; jobs: build: runs-on: &amp;lt;RUN_ON&amp;gt; steps: - name: Count commits in last week id: commits run: echo &amp;#34;::set-output name=count::$(git rev-list --count HEAD --since=&amp;#39;&amp;lt;DATE&amp;gt;&amp;#39;)&amp;#34; - name: Build project if: steps.commits.outputs.count &amp;gt; 0 run: build-project &amp;lt;PIPELINE&amp;gt;: The name of your pipeline. &amp;lt;RUN_ON&amp;gt;: The runner to use, see GitHub&amp;rsquo;s own documentation for possible values.</description></item><item><title>Ignore Exit Codes</title><link>https://seb.xn--ho-hia.de/posts/makefile-ignore/</link><pubDate>Mon, 08 Feb 2021 00:00:00 +0000</pubDate><guid>https://seb.xn--ho-hia.de/posts/makefile-ignore/</guid><description>In case you are using a Makefile to define a complex build step - for example start database, run tests, stop database - consider using the - qualifier in front of your actual build step like this:
.PHONY: build build: start-database -build-software stop-database Thanks to -, the database will be stopped even if building your software fails, therefore making sure to clean up after ourselves once the build finishes.
Links https://www.</description></item><item><title>Service workers with Hugo</title><link>https://seb.xn--ho-hia.de/posts/hugo-serviceworkers/</link><pubDate>Mon, 25 Jan 2021 00:00:00 +0000</pubDate><guid>https://seb.xn--ho-hia.de/posts/hugo-serviceworkers/</guid><description>To use a serviceworker to cache a Hugo site, configure a media type in your config.toml:
[mediaTypes.&amp;#34;application/javascript&amp;#34;] suffixes = [&amp;#34;js&amp;#34;] [outputFormats.ServiceWorker] name = &amp;#34;ServiceWorker&amp;#34; mediaType = &amp;#34;application/javascript&amp;#34; baseName = &amp;#34;serviceworker&amp;#34; isPlainText = false rel = &amp;#34;alternate&amp;#34; isHTML = false noUgly = true permalinkable = false Create a new layout in _default/home.serviceworker.js with the following content:
const CACHE = &amp;#39;cache-and-update&amp;#39;; self.addEventListener(&amp;#39;install&amp;#39;, (event) =&amp;gt; { event.waitUntil(precache()); }); self.addEventListener(&amp;#39;fetch&amp;#39;, (event) =&amp;gt; { event.respondWith(fromCache(event.request)); event.</description></item><item><title>Web app manifests with Hugo</title><link>https://seb.xn--ho-hia.de/posts/hugo-webmanifest/</link><pubDate>Mon, 11 Jan 2021 00:00:00 +0000</pubDate><guid>https://seb.xn--ho-hia.de/posts/hugo-webmanifest/</guid><description>To publish a web app manifest document with your Hugo site, configure a media type in your config.toml:
[mediaTypes.&amp;#34;application/manifest+json&amp;#34;] suffixes = [&amp;#34;webmanifest&amp;#34;] [outputFormats.Webmanifest] name = &amp;#34;Web App Manifest&amp;#34; mediaType = &amp;#34;application/manifest+json&amp;#34; baseName = &amp;#34;manifest&amp;#34; isPlainText = false rel = &amp;#34;alternate&amp;#34; isHTML = false noUgly = true permalinkable = false Create a new layout in _default/home.manifest.json with the following content:
{ &amp;#34;name&amp;#34;: &amp;#34;{{ .Site.Title }}&amp;#34;, &amp;#34;short_name&amp;#34;: &amp;#34;{{ .Site.Title }}&amp;#34;, &amp;#34;start_url&amp;#34;: &amp;#34;.&amp;#34;, &amp;#34;display&amp;#34;: &amp;#34;minimal-ui&amp;#34;, &amp;#34;background_color&amp;#34;: &amp;#34;#fff&amp;#34;, &amp;#34;description&amp;#34;: &amp;#34;{{ .</description></item><item><title>Bundling with Hugo</title><link>https://seb.xn--ho-hia.de/posts/hugo-bundles/</link><pubDate>Mon, 28 Dec 2020 00:00:00 +0000</pubDate><guid>https://seb.xn--ho-hia.de/posts/hugo-bundles/</guid><description>Hugo allows bundling of assets with several built-in functions:
{{ $normalize := resources.Get &amp;#34;/css/normalize.css&amp;#34; }} {{ $font := resources.Get &amp;#34;/css/font.css&amp;#34; }} {{ $header := resources.Get &amp;#34;/css/header.css&amp;#34; }} {{ $footer := resources.Get &amp;#34;/css/footer.css&amp;#34; }} {{ $navigation := resources.Get &amp;#34;/css/navigation.css&amp;#34; }} {{ $navigation_mobile := resources.Get &amp;#34;/css/navigation-mobile.css&amp;#34; }} {{ $layout := resources.Get &amp;#34;/css/layout.css&amp;#34; }} {{ $layout_mobile := resources.Get &amp;#34;/css/layout-mobile.css&amp;#34; }} {{ $syntax := resources.Get &amp;#34;/css/syntax.css&amp;#34; }} {{ $darkmode := resources.Get &amp;#34;/css/darkmode.css&amp;#34; | resources.Minify | resources.</description></item><item><title>humans.txt with Hugo</title><link>https://seb.xn--ho-hia.de/posts/hugo-humans/</link><pubDate>Mon, 14 Dec 2020 00:00:00 +0000</pubDate><guid>https://seb.xn--ho-hia.de/posts/hugo-humans/</guid><description>To publish a humans.txt document with your Hugo site, configure a media type in your config.toml:
[mediaTypes.&amp;#34;text/plain&amp;#34;] suffixes = [&amp;#34;txt&amp;#34;] [outputFormats.Humans] name = &amp;#34;Humans&amp;#34; mediaType = &amp;#34;text/plain&amp;#34; baseName = &amp;#34;humans&amp;#34; isPlainText = true rel = &amp;#34;alternate&amp;#34; isHTML = false noUgly = true permalinkable = false Create a new layout in _default/home.humans.txt with the following content:
/* TEAM */ {{ range $.Site.Data.contributors }} {{ .title }}: {{ .first_name }} {{ .last_name }} Site: {{ .</description></item><item><title>FOAF with Hugo</title><link>https://seb.xn--ho-hia.de/posts/hugo-foaf/</link><pubDate>Mon, 30 Nov 2020 00:00:00 +0000</pubDate><guid>https://seb.xn--ho-hia.de/posts/hugo-foaf/</guid><description>To publish a FOAF document with your Hugo site, configure a media type in your config.toml:
[mediaTypes.&amp;#34;application/rdf+xml&amp;#34;] suffixes = [&amp;#34;rdf&amp;#34;] [outputFormats.Foaf] name = &amp;#34;FOAF&amp;#34; mediaType = &amp;#34;application/rdf+xml&amp;#34; baseName = &amp;#34;foaf&amp;#34; isPlainText = false rel = &amp;#34;alternate&amp;#34; isHTML = false noUgly = true permalinkable = false Create a new layout in _default/home.foaf.rdf with the following content:
&amp;lt;rdf:RDF xmlns:rdf=&amp;#34;http://www.w3.org/1999/02/22-rdf-syntax-ns#&amp;#34; xmlns:rdfs=&amp;#34;http://www.w3.org/2000/01/rdf-schema#&amp;#34; xmlns:foaf=&amp;#34;http://xmlns.com/foaf/0.1/&amp;#34;&amp;gt; &amp;lt;foaf:PersonalProfileDocument rdf:about=&amp;#34;&amp;#34;&amp;gt; &amp;lt;foaf:maker rdf:resource=&amp;#34;#me&amp;#34; /&amp;gt; &amp;lt;foaf:primaryTopic rdf:resource=&amp;#34;{{ .Site.Title }}&amp;#34; /&amp;gt; &amp;lt;/foaf:PersonalProfileDocument&amp;gt; &amp;lt;foaf:Project rdf:ID=&amp;#34;{{ .</description></item><item><title>Atom Feed with Hugo</title><link>https://seb.xn--ho-hia.de/posts/hugo-atom/</link><pubDate>Mon, 16 Nov 2020 00:00:00 +0000</pubDate><guid>https://seb.xn--ho-hia.de/posts/hugo-atom/</guid><description>To publish Atom feeds for your Hugo site, configure a media type in your config.toml:
[mediaTypes.&amp;#34;application/atom+xml&amp;#34;] suffixes = [&amp;#34;xml&amp;#34;] [outputFormats.Atom] name = &amp;#34;Atom&amp;#34; mediaType = &amp;#34;application/atom+xml&amp;#34; baseName = &amp;#34;atom&amp;#34; isPlainText = false rel = &amp;#34;alternate&amp;#34; isHTML = false noUgly = true permalinkable = false Create a new layout in _default/list.atom.xml with the following content:
{{ printf `&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt;` | safeHTML }} &amp;lt;feed xmlns=&amp;#34;http://www.w3.org/2005/Atom&amp;#34;{{ with site.LanguageCode }} xml:lang=&amp;#34;{{ . }}&amp;#34;{{ end }}&amp;gt; &amp;lt;generator uri=&amp;#34;https://gohugo.</description></item><item><title>Send toots with GitHub Actions</title><link>https://seb.xn--ho-hia.de/posts/github-actions-send-toot/</link><pubDate>Mon, 16 Nov 2020 00:00:00 +0000</pubDate><guid>https://seb.xn--ho-hia.de/posts/github-actions-send-toot/</guid><description>The rzr/fediverse-action action allows to send a toot in your GitHub Action.
name: &amp;lt;NAME&amp;gt; jobs: build: runs-on: &amp;lt;RUN_ON&amp;gt; steps: - name: Publish Toot uses: rzr/fediverse-action@master with: access-token: ${{ secrets.MASTODON_TOKEN }} message: &amp;lt;MESSAGE&amp;gt; host: ${{ secrets.MASTODON_SERVER }} &amp;lt;PIPELINE&amp;gt;: The name of your pipeline. &amp;lt;RUN_ON&amp;gt;: The runner to use, see GitHub&amp;rsquo;s own documentation for possible values. &amp;lt;MESSAGE&amp;gt;: Message for the toot.</description></item><item><title>Send emails with GitHub Actions</title><link>https://seb.xn--ho-hia.de/posts/github-actions-send-email/</link><pubDate>Mon, 02 Nov 2020 00:00:00 +0000</pubDate><guid>https://seb.xn--ho-hia.de/posts/github-actions-send-email/</guid><description>The dawidd6/action-send-mail action allows to send an email in your GitHub Action.
name: &amp;lt;PIPELINE&amp;gt; jobs: build: runs-on: &amp;lt;RUN_ON&amp;gt; steps: - name: Send mail uses: dawidd6/action-send-mail@v3 with: server_address: ${{ secrets.MAIL_SERVER }} server_port: ${{ secrets.MAIL_PORT }} username: ${{ secrets.MAIL_USERNAME }} password: ${{ secrets.MAIL_PASSWORD }} subject: &amp;lt;SUBJECT&amp;gt; body: &amp;lt;BODY&amp;gt; to: ${{ secrets.MAIL_RECIPIENT }} from: ${{ secrets.MAIL_SENDER }} &amp;lt;PIPELINE&amp;gt;: The name of your pipeline. &amp;lt;RUN_ON&amp;gt;: The runner to use, see GitHub&amp;rsquo;s own documentation for possible values.</description></item><item><title>Upload release assets with GitHub Actions</title><link>https://seb.xn--ho-hia.de/posts/github-actions-upload-release-assets/</link><pubDate>Mon, 19 Oct 2020 00:00:00 +0000</pubDate><guid>https://seb.xn--ho-hia.de/posts/github-actions-upload-release-assets/</guid><description>The actions/upload-release-asset action allows to upload a release artifact in your GitHub Action.
name: &amp;lt;PIPELINE&amp;gt; jobs: build: runs-on: &amp;lt;RUN_ON&amp;gt; steps: - name: Upload Release Asset id: upload_release_asset uses: actions/upload-release-asset@v1 env: GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} with: upload_url: ${{ steps.create_release.outputs.upload_url }} asset_path: ./some/path/to/file.zip asset_name: public-name-for-file.zip asset_content_type: application/zip &amp;lt;PIPELINE&amp;gt;: The name of your pipeline. &amp;lt;RUN_ON&amp;gt;: The runner to use, see GitHub&amp;rsquo;s own documentation for possible values.</description></item><item><title>Create GitHub releases with GitHub Actions</title><link>https://seb.xn--ho-hia.de/posts/github-actions-create-release/</link><pubDate>Mon, 05 Oct 2020 00:00:00 +0000</pubDate><guid>https://seb.xn--ho-hia.de/posts/github-actions-create-release/</guid><description>The actions/create-release action allows to create a new GitHub releases in your GitHub Action.
name: &amp;lt;PIPELINE&amp;gt; jobs: build: runs-on: &amp;lt;RUN_ON&amp;gt; steps: - name: Create Release uses: actions/create-release@v1 env: GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} with: tag_name: &amp;lt;TAG&amp;gt; release_name: &amp;lt;RELEASE&amp;gt; draft: false prerelease: false body: | Your release text here Some code block: ```yaml yaml: inside: of: another: yaml ``` &amp;lt;PIPELINE&amp;gt;: The name of your pipeline. &amp;lt;RUN_ON&amp;gt;: The runner to use, see GitHub&amp;rsquo;s own documentation for possible values.</description></item><item><title>Publish Hugo site with GitHub Actions</title><link>https://seb.xn--ho-hia.de/posts/github-actions-publish-hugo-site/</link><pubDate>Mon, 21 Sep 2020 00:00:00 +0000</pubDate><guid>https://seb.xn--ho-hia.de/posts/github-actions-publish-hugo-site/</guid><description>The peaceiris/actions-gh-pages action allows to publish a Hugo site in your GitHub Action.
name: &amp;lt;PIPELINE&amp;gt; jobs: build: runs-on: &amp;lt;RUN_ON&amp;gt; steps: - name: Deploy Website uses: peaceiris/actions-gh-pages@v3 with: github_token: ${{ secrets.GITHUB_TOKEN }} publish_dir: &amp;lt;PUBLISH_DIR&amp;gt; force_orphan: true cname: &amp;lt;CNAME&amp;gt; &amp;lt;PIPELINE&amp;gt;: The name of your pipeline. &amp;lt;RUN_ON&amp;gt;: The runner to use, see GitHub&amp;rsquo;s own documentation for possible values. &amp;lt;PUBLISH_DIR&amp;gt;: The file system location of the built site. &amp;lt;CNAME&amp;gt;: The CNAME of your custom domain.</description></item><item><title>Cache Maven artifacts with GitHub Actions</title><link>https://seb.xn--ho-hia.de/posts/github-actions-cache-maven-artifacts/</link><pubDate>Mon, 07 Sep 2020 00:00:00 +0000</pubDate><guid>https://seb.xn--ho-hia.de/posts/github-actions-cache-maven-artifacts/</guid><description>The actions/cache action allows to cache artifacts in your GitHub Action.
name: &amp;lt;PIPELINE&amp;gt; jobs: build: runs-on: &amp;lt;RUN_ON&amp;gt; steps: - name: Cache Maven artifacts uses: actions/cache@v1 with: path: ~/.m2/repository key: ${{ runner.os }}-maven-${{ hashFiles(&amp;#39;**/pom.xml&amp;#39;) }} restore-keys: | ${{ runner.os }}-maven- &amp;lt;PIPELINE&amp;gt;: The name of your pipeline. &amp;lt;RUN_ON&amp;gt;: The runner to use, see GitHub&amp;rsquo;s own documentation for possible values.</description></item><item><title>Use a specific Hugo version with GitHub Actions</title><link>https://seb.xn--ho-hia.de/posts/github-actions-specify-hugo-version/</link><pubDate>Mon, 24 Aug 2020 00:00:00 +0000</pubDate><guid>https://seb.xn--ho-hia.de/posts/github-actions-specify-hugo-version/</guid><description>The actions-hugo action allows to use a specific Hugo version in your GitHub Action.
name: &amp;lt;PIPELINE&amp;gt; jobs: build: runs-on: &amp;lt;RUN_ON&amp;gt; steps: - name: Setup hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: &amp;lt;HUGO_VERSION&amp;gt; &amp;lt;PIPELINE&amp;gt;: The name of your pipeline. &amp;lt;RUN_ON&amp;gt;: The runner to use, see GitHub&amp;rsquo;s own documentation for possible values. &amp;lt;HUGO_VERSION&amp;gt;: The released versions or use latest to always use the latest version of Hugo.</description></item><item><title>Use a specific Java version with GitHub Actions</title><link>https://seb.xn--ho-hia.de/posts/github-actions-specify-java-version/</link><pubDate>Mon, 10 Aug 2020 00:00:00 +0000</pubDate><guid>https://seb.xn--ho-hia.de/posts/github-actions-specify-java-version/</guid><description>The setup-java action allows to use a specific Java version in your GitHub Action.
name: &amp;lt;PIPELINE&amp;gt; jobs: build: runs-on: &amp;lt;RUN_ON&amp;gt; steps: - name: Set up JDK &amp;lt;JDK_VERSION&amp;gt; uses: actions/setup-java@v1 with: java-version: &amp;lt;JDK_VERSION&amp;gt; &amp;lt;PIPELINE&amp;gt;: The name of your pipeline. &amp;lt;RUN_ON&amp;gt;: The runner to use, see GitHub&amp;rsquo;s own documentation for possible values. &amp;lt;JDK_VERSION&amp;gt;: The required Java version for your project.</description></item><item><title>XDG Base Directory Specification</title><link>https://seb.xn--ho-hia.de/posts/xdg-dot-files/</link><pubDate>Mon, 27 Jul 2020 00:00:00 +0000</pubDate><guid>https://seb.xn--ho-hia.de/posts/xdg-dot-files/</guid><description>The XDG Base Directory Specification has been around for a while, yet not every software has adopted it yet. Here is an incomplete list of fixes:
# use existing env variables or define new [ -z &amp;#34;$XDG_CACHE_HOME&amp;#34; ] &amp;amp;&amp;amp; export XDG_CACHE_HOME=&amp;#34;$HOME/.cache&amp;#34; [ -z &amp;#34;$XDG_CONFIG_DIRS&amp;#34; ] &amp;amp;&amp;amp; export XDG_CONFIG_DIRS=&amp;#34;/etc/xdg&amp;#34; [ -z &amp;#34;$XDG_CONFIG_HOME&amp;#34; ] &amp;amp;&amp;amp; export XDG_CONFIG_HOME=&amp;#34;$HOME/.config&amp;#34; [ -z &amp;#34;$XDG_DATA_DIRS&amp;#34; ] &amp;amp;&amp;amp; export XDG_DATA_DIRS=&amp;#34;/usr/local/share:/usr/share&amp;#34; [ -z &amp;#34;$XDG_DATA_HOME&amp;#34; ] &amp;amp;&amp;amp; export XDG_DATA_HOME=&amp;#34;$HOME/.local/share&amp;#34; # gradle export GRADLE_USER_HOME=&amp;#34;$XDG_DATA_HOME/gradle&amp;#34; # httpie export HTTPIE_CONFIG_DIR=&amp;#34;$XDG_CONFIG_HOME/httpie&amp;#34; # npm export NPM_CONFIG_USERCONFIG=&amp;#34;$XDG_CONFIG_HOME/npm/npmrc&amp;#34; export npm_config_cache=&amp;#34;$XDG_CACHE_HOME/npm&amp;#34; # password-store export PASSWORD_STORE_DIR=&amp;#34;$XDG_DATA_HOME/password-store&amp;#34; To make your own software XDG-aware, consider using the dirs-dev or configdir libraries.</description></item><item><title>GitLab the Git Distributor</title><link>https://seb.xn--ho-hia.de/posts/gitlab-distributor/</link><pubDate>Mon, 13 Jul 2020 00:00:00 +0000</pubDate><guid>https://seb.xn--ho-hia.de/posts/gitlab-distributor/</guid><description>Git at its core is a decentralized version control system. Yet many people are relying on a single central server (github.com at the time of this writing) to share their work with others. Pro Git rightfully mentions it at first position in its chapter about distributed workflows because using a central server is usually the simplest approach to sharing code.
While the central server approach is easy to use, it might not work in all scenarios:</description></item><item><title>Makefile Help</title><link>https://seb.xn--ho-hia.de/posts/makefile-help/</link><pubDate>Mon, 29 Jun 2020 00:00:00 +0000</pubDate><guid>https://seb.xn--ho-hia.de/posts/makefile-help/</guid><description>Use the following Perl snippet to automatically generate help output for your Makefile:
GREEN := $(shell tput -Txterm setaf 2) WHITE := $(shell tput -Txterm setaf 7) YELLOW := $(shell tput -Txterm setaf 3) RESET := $(shell tput -Txterm sgr0) HELP_FUN = \ %help; \ while(&amp;lt;&amp;gt;) { push @{$$help{$$2 // &amp;#39;targets&amp;#39;}}, [$$1, $$3] if /^([a-zA-Z\-]+)\s*:.*\#\#(?:@([a-zA-Z\-]+))?\s(.*)$$/ }; \ print &amp;#34;usage: make [target]\n\n&amp;#34;; \ for (sort keys %help) { \ print &amp;#34;${WHITE}$$_:${RESET}\n&amp;#34;; \ for (@{$$help{$$_}}) { \ $$sep = &amp;#34; &amp;#34; x (32 - length $$_-&amp;gt;[0]); \ print &amp;#34; ${YELLOW}$$_-&amp;gt;[0]${RESET}$$sep${GREEN}$$_-&amp;gt;[1]${RESET}\n&amp;#34;; \ }; \ print &amp;#34;\n&amp;#34;; } To use HELP_FUN, add the following help target to the same Makefile:</description></item><item><title>Short Git Clones</title><link>https://seb.xn--ho-hia.de/posts/short-git-clones/</link><pubDate>Mon, 15 Jun 2020 00:00:00 +0000</pubDate><guid>https://seb.xn--ho-hia.de/posts/short-git-clones/</guid><description>In case you don&amp;rsquo;t want to write git clone git@github.com:orga/repo.git all the time, consider using a custom SSH configuration (~/.ssh/config) like this:
Host github HostName github.com User git IdentityFile ~/.ssh/&amp;lt;KEY-FOR-GITHUB&amp;gt; Host gitlab HostName gitlab.com User git IdentityFile ~/.ssh/&amp;lt;KEY-FOR-GITLAB&amp;gt; Host bitbucket HostName bitbucket.org User git IdentityFile ~/.ssh/&amp;lt;KEY-FOR-BITBUCKET&amp;gt; Host codeberg HostName codeberg.org User git IdentityFile ~/.ssh/&amp;lt;KEY-FOR-CODEBERG&amp;gt; Once configured, you can now write:
$ git clone github:orga/repo $ git clone gitlab:orga/repo $ git clone bitbucket:orga/repo $ git clone codeberg:orga/repo In case you are working with many repositories inside a single organization, consider adding the following Git configuration ($XDG_CONFIG_HOME/git/config or ~/.</description></item><item><title>Create Timestamp with GitHub Actions</title><link>https://seb.xn--ho-hia.de/posts/github-actions-create-timestamp/</link><pubDate>Thu, 11 Jun 2020 00:00:00 +0000</pubDate><guid>https://seb.xn--ho-hia.de/posts/github-actions-create-timestamp/</guid><description>In case you are into calver or have another reason to create a timestamp with GitHub Actions, do the following:
name: &amp;lt;PIPELINE&amp;gt; jobs: build: runs-on: &amp;lt;RUN_ON&amp;gt; steps: - name: Create release version id: &amp;lt;ID&amp;gt; run: echo &amp;#34;::set-output name=&amp;lt;NAME&amp;gt;::$(date +&amp;#39;%Y.%m.%d-%H%M%S&amp;#39;)&amp;#34; &amp;lt;PIPELINE&amp;gt;: The name of your pipeline. &amp;lt;RUN_ON&amp;gt;: The runner to use, see GitHub&amp;rsquo;s own documentation for possible values. &amp;lt;ID&amp;gt;: The unique ID of the timestamp step. &amp;lt;NAME&amp;gt;: The name of the created timestamp.</description></item></channel></rss>