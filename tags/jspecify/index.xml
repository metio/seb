<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Jspecify on Sebastian Hoß</title><link>https://seb.xn--ho-hia.de/tags/jspecify/</link><description>Recent content in Jspecify on Sebastian Hoß</description><generator>Hugo</generator><language>en</language><lastBuildDate>Mon, 09 Jan 2023 07:05:35 +0100</lastBuildDate><atom:link href="https://seb.xn--ho-hia.de/tags/jspecify/index.xml" rel="self" type="application/rss+xml"/><item><title>jspecify</title><link>https://seb.xn--ho-hia.de/posts/jspecify/</link><pubDate>Mon, 09 Jan 2023 00:00:00 +0000</pubDate><guid>https://seb.xn--ho-hia.de/posts/jspecify/</guid><description>Every Java developer has probably encountered a NullPointerException at least once in their life. The exception is thrown every time you try to dereference and use some object before initializing it. The following snippet shows a simple example:
String someName; // value is &amp;#39;null&amp;#39; someName.toUpperCase(); // throws NullPointerException Modern IDEs have some sort of detection for this kind of problem and warn developers while they are writing code like this. Those IDEs typically rely on static code analysis to determine if a value is null and therefore a potential for a NullPointerException is present in your code.</description></item></channel></rss>