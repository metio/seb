<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Java on Sebastian Hoß</title><link>https://seb.xn--ho-hia.de/tags/java/</link><description>Recent content in Java on Sebastian Hoß</description><generator>Hugo</generator><language>en</language><lastBuildDate>Mon, 09 Jan 2023 07:05:35 +0100</lastBuildDate><atom:link href="https://seb.xn--ho-hia.de/tags/java/index.xml" rel="self" type="application/rss+xml"/><item><title>jspecify</title><link>https://seb.xn--ho-hia.de/posts/jspecify/</link><pubDate>Mon, 09 Jan 2023 00:00:00 +0000</pubDate><guid>https://seb.xn--ho-hia.de/posts/jspecify/</guid><description>Every Java developer has probably encountered a NullPointerException at least once in their life. The exception is thrown every time you try to dereference and use some object before initializing it. The following snippet shows a simple example:
String someName; // value is &amp;#39;null&amp;#39; someName.toUpperCase(); // throws NullPointerException Modern IDEs have some sort of detection for this kind of problem and warn developers while they are writing code like this. Those IDEs typically rely on static code analysis to determine if a value is null and therefore a potential for a NullPointerException is present in your code.</description></item><item><title>Clojure Java Interoperability</title><link>https://seb.xn--ho-hia.de/posts/clojure-java-interoperability/</link><pubDate>Sat, 29 Jan 2022 00:00:00 +0000</pubDate><guid>https://seb.xn--ho-hia.de/posts/clojure-java-interoperability/</guid><description>Clojure has several forms and macros to call Java code. However, calling Clojure code from Java is not always so straightforward. The following post shows the different options currently available.
Using gen-class Clojure code can be compiled to standard JVM bytecode using gen-class.
Adding static modifiers Clojure imposes the concept of immutability. As such Clojure functions are/should be void of any state or side effects and only operate on the given input.</description></item><item><title>Use a specific Java version with GitHub Actions</title><link>https://seb.xn--ho-hia.de/posts/github-actions-specify-java-version/</link><pubDate>Mon, 10 Aug 2020 00:00:00 +0000</pubDate><guid>https://seb.xn--ho-hia.de/posts/github-actions-specify-java-version/</guid><description>The setup-java action allows to use a specific Java version in your GitHub Action.
name: &amp;lt;PIPELINE&amp;gt; jobs: build: runs-on: &amp;lt;RUN_ON&amp;gt; steps: - name: Set up JDK &amp;lt;JDK_VERSION&amp;gt; uses: actions/setup-java@v1 with: java-version: &amp;lt;JDK_VERSION&amp;gt; &amp;lt;PIPELINE&amp;gt;: The name of your pipeline. &amp;lt;RUN_ON&amp;gt;: The runner to use, see GitHub&amp;rsquo;s own documentation for possible values. &amp;lt;JDK_VERSION&amp;gt;: The required Java version for your project.</description></item></channel></rss>