<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Git on Sebastian Hoß</title><link>https://seb.xn--ho-hia.de/tags/git/</link><description>Recent content in Git on Sebastian Hoß</description><generator>Hugo</generator><language>en</language><lastBuildDate>Fri, 06 Jan 2023 17:32:06 +0100</lastBuildDate><atom:link href="https://seb.xn--ho-hia.de/tags/git/index.xml" rel="self" type="application/rss+xml"/><item><title>Multiple Git Configurations</title><link>https://seb.xn--ho-hia.de/posts/multiple-git-configs/</link><pubDate>Thu, 05 Jan 2023 00:00:00 +0000</pubDate><guid>https://seb.xn--ho-hia.de/posts/multiple-git-configs/</guid><description>To split yet re-use as much configuration for Git as possible, you can create one root configuration that looks similar to this:
[user] name = Your Name Here [includeIf &amp;#34;gitdir:~/git/personal/&amp;#34;] path = ~/.config/git/personal [includeIf &amp;#34;gitdir:~/git/work/&amp;#34;] path = ~/.config/git/work The includeIf directive supports multiple keywords. In my case, work and personal projects have a different root directory, therefore I can filter based on the location using gitdir. The personal Git configuration simply looks like this:</description></item><item><title>Automatically update plugins for vim/nvim</title><link>https://seb.xn--ho-hia.de/posts/nvim-plugin-auto-updates/</link><pubDate>Sat, 01 Jan 2022 00:00:00 +0000</pubDate><guid>https://seb.xn--ho-hia.de/posts/nvim-plugin-auto-updates/</guid><description>Both Vim and Neovim have a built-in plugin mechanism that loads plugins from ~/.vim/pack/*/{start,opt}/* (Vim) or ~/.local/share/nvim/site/pack/*/{start,opt}/* (Neovim). All you have to do to install new plugins, is to git clone their repository into those directories. To automatically update those clones, create the following script:
#!/usr/bin/env zsh ############################################################################### # This script git-pulls all installed nvim plugins which are using the built-in # nvim plugin manager. Those plugins are located in .</description></item><item><title>Manage dotfiles with chezmoi and git</title><link>https://seb.xn--ho-hia.de/posts/chezmoi-auto-git/</link><pubDate>Mon, 06 Sep 2021 00:00:00 +0000</pubDate><guid>https://seb.xn--ho-hia.de/posts/chezmoi-auto-git/</guid><description>chezmoi can automatically commit and push changes to your dotfiles into a (remote) Git repository. Enable it with the following snippet in your chezmoi.toml
[sourceVCS] autoCommit = true autoPush = true Every time you call chezmoi add /path/to/file will now create a new commit in your local chezmoi repository and push those changes into your configured remote repository.</description></item><item><title>Push-only mirrors for Git Repositories</title><link>https://seb.xn--ho-hia.de/posts/git-push-only-mirror/</link><pubDate>Mon, 12 Jul 2021 00:00:00 +0000</pubDate><guid>https://seb.xn--ho-hia.de/posts/git-push-only-mirror/</guid><description>In case you want to have push-only mirrors for your Git repository, consider adding a special mirror remote like this:
$ git remote add mirrors DISABLED $ git remote set-url --add --push mirrors git@codeberg.org:org/repo.git $ git remote set-url --add --push mirrors git@gitlab.com:org/repo.git $ git remote set-url --add --push mirrors git@bitbucket.org:org/repo.git The above will create a new remote called mirrors which has no fetch URL and therefore can only be pushed:</description></item><item><title>Mirror Git Repositories</title><link>https://seb.xn--ho-hia.de/posts/git-mirror/</link><pubDate>Mon, 28 Jun 2021 00:00:00 +0000</pubDate><guid>https://seb.xn--ho-hia.de/posts/git-mirror/</guid><description>In case you want to make use of the decentralized nature of Git, consider using multiple push targets like this:
$ git remote set-url origin --push --add git@example.com/project.git $ git remote set-url origin --push --add git@another.com/project.git Note that the first call to set-url will overwrite an existing remote creating with git clone. Any additional call will actually recognize the --add option and add the new target to an existing remote.</description></item><item><title>GitLab the Git Distributor</title><link>https://seb.xn--ho-hia.de/posts/gitlab-distributor/</link><pubDate>Mon, 13 Jul 2020 00:00:00 +0000</pubDate><guid>https://seb.xn--ho-hia.de/posts/gitlab-distributor/</guid><description>Git at its core is a decentralized version control system. Yet many people are relying on a single central server (github.com at the time of this writing) to share their work with others. Pro Git rightfully mentions it at first position in its chapter about distributed workflows because using a central server is usually the simplest approach to sharing code.
While the central server approach is easy to use, it might not work in all scenarios:</description></item><item><title>Short Git Clones</title><link>https://seb.xn--ho-hia.de/posts/short-git-clones/</link><pubDate>Mon, 15 Jun 2020 00:00:00 +0000</pubDate><guid>https://seb.xn--ho-hia.de/posts/short-git-clones/</guid><description>In case you don&amp;rsquo;t want to write git clone git@github.com:orga/repo.git all the time, consider using a custom SSH configuration (~/.ssh/config) like this:
Host github HostName github.com User git IdentityFile ~/.ssh/&amp;lt;KEY-FOR-GITHUB&amp;gt; Host gitlab HostName gitlab.com User git IdentityFile ~/.ssh/&amp;lt;KEY-FOR-GITLAB&amp;gt; Host bitbucket HostName bitbucket.org User git IdentityFile ~/.ssh/&amp;lt;KEY-FOR-BITBUCKET&amp;gt; Host codeberg HostName codeberg.org User git IdentityFile ~/.ssh/&amp;lt;KEY-FOR-CODEBERG&amp;gt; Once configured, you can now write:
$ git clone github:orga/repo $ git clone gitlab:orga/repo $ git clone bitbucket:orga/repo $ git clone codeberg:orga/repo In case you are working with many repositories inside a single organization, consider adding the following Git configuration ($XDG_CONFIG_HOME/git/config or ~/.</description></item></channel></rss>