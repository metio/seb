<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://gohugo.io/" version="0.128.0">Hugo</generator><title type="html">Interoperability on Sebastian Ho√ü</title><link href="https://seb.xn--ho-hia.de/tags/interoperability/" rel="alternate" type="text/html" title="html"/><link href="https://seb.xn--ho-hia.de/tags/interoperability/index.xml" rel="alternate" type="application/rss+xml" title="rss"/><link href="https://seb.xn--ho-hia.de/tags/interoperability/atom.xml" rel="self" type="application/atom+xml" title="atom"/><updated>2024-07-01T02:33:53+00:00</updated><id>https://seb.xn--ho-hia.de/tags/interoperability/</id><entry><title type="html">Clojure Java Interoperability</title><link href="https://seb.xn--ho-hia.de/posts/clojure-java-interoperability/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://seb.xn--ho-hia.de/posts/github-actions-specify-java-version/?utm_source=atom_feed" rel="related" type="text/html" title="Use a specific Java version with GitHub Actions"/><id>https://seb.xn--ho-hia.de/posts/clojure-java-interoperability/</id><published>2022-01-29T00:00:00+00:00</published><updated>2023-01-06T17:32:06+01:00</updated><content type="html"><![CDATA[<p>Clojure has several <a href="https://clojure.org/java_interop">forms and macros</a> to call Java code. However, calling Clojure code from Java is not always so straightforward. The following post shows the different options currently available.</p>
<h2 id="using-gen-class">Using <code>gen-class</code></h2>
<p>Clojure code can be <a href="https://clojure.org/compilation">compiled</a> to standard JVM bytecode using <a href="https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/gen-class">gen-class</a>.</p>
<h3 id="adding-static-modifiers">Adding static modifiers</h3>
<p>Clojure imposes the concept of immutability. As such Clojure functions are/should be void of any state or side effects and only operate on the given input. Therefore, exporting Clojure functions as static Java methods makes sense. The following example defines a Clojure function, a corresponding Java-callable function and exports the Java function as a static method in the class <code>com.example.Computation</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-clojure" data-lang="clojure"><span class="line"><span class="cl"><span class="p">(</span><span class="kd">ns </span><span class="nv">com.example.computation</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="ss">:gen-class</span>
</span></span><span class="line"><span class="cl">    <span class="ss">:name</span> <span class="nv">com.example.Computation</span>
</span></span><span class="line"><span class="cl">    <span class="ss">:methods</span> <span class="p">[</span><span class="o">#^</span><span class="p">{</span><span class="ss">:static</span> <span class="nv">true</span><span class="p">}</span> <span class="p">[</span><span class="nv">incrementRange</span> <span class="p">[</span><span class="nv">int</span><span class="p">]</span> <span class="nv">java.util.List</span><span class="p">]]))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="kd">defn </span><span class="nv">increment-range</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Creates a sequence of numbers up to max and then increments them.&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">[</span><span class="nv">max</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">map inc </span><span class="p">(</span><span class="nb">take max </span><span class="p">(</span><span class="nf">range</span><span class="p">))))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="kd">defn </span><span class="nv">-incrementRange</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;A Java-callable wrapper around the &#39;increment-range&#39; function.&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">[</span><span class="nv">max</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nf">increment-range</span> <span class="nv">max</span><span class="p">))</span>
</span></span></code></pre></div><p>The Java wrapper has to follow the <a href="https://docs.oracle.com/javase/specs/jls/se17/html/jls-3.html#jls-3.8">standard rules</a> for method names. Therefore <code>increment-range</code> has to be renamed to <code>incrementRange</code> (or some similar name without the &ldquo;-&rdquo; in it). The &ldquo;-&rdquo; prefix for the Java wrapper can be configured inside the <code>:gen-class</code> form and will be removed once <code>gen-class</code> runs. The usage from Java looks like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span><span class="w"> </span><span class="nn">com.example</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">ClojureJavaInteropStatic</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">main</span><span class="p">(</span><span class="n">String</span><span class="o">[]</span><span class="w"> </span><span class="n">args</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">List</span><span class="w"> </span><span class="n">incrementedRange</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Computation</span><span class="p">.</span><span class="na">incrementRange</span><span class="p">(</span><span class="n">10</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><h3 id="adding-generics">Adding generics</h3>
<p>The returned list in the above code is raw because the method definition doesn&rsquo;t use generics. To solve this problem declare that the generated class <code>:implements</code> a certain interface that exposes the desired method definition(s). You won&rsquo;t be able to declare your methods as static anymore, but get a generified method for all your Java needs.</p>
<p>The Java interface:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span><span class="w"> </span><span class="nn">com.example</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kd">interface</span> <span class="nc">RangeIncrementer</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">List</span><span class="o">&lt;</span><span class="n">Long</span><span class="o">&gt;</span><span class="w"> </span><span class="nf">incrementRange</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">max</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>The changed Clojure namespace:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-clojure" data-lang="clojure"><span class="line"><span class="cl"><span class="p">(</span><span class="kd">ns </span><span class="nv">com.example.computation</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="ss">:gen-class</span>
</span></span><span class="line"><span class="cl">    <span class="ss">:name</span> <span class="nv">com.example.Computation</span>
</span></span><span class="line"><span class="cl">    <span class="ss">:implements</span> <span class="p">[</span><span class="nv">com.example.RangeIncrementer</span><span class="p">]))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="kd">defn </span><span class="nv">increment-range</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Creates a sequence of numbers up to max and then increments them.&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">[</span><span class="nv">max</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">map inc </span><span class="p">(</span><span class="nb">take max </span><span class="p">(</span><span class="nf">range</span><span class="p">))))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="kd">defn </span><span class="nv">-incrementRange</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;A Java-callable wrapper around the &#39;increment-range&#39; function.&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">[</span><span class="nv">this</span> <span class="nv">max</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nf">increment-range</span> <span class="nv">max</span><span class="p">))</span>
</span></span></code></pre></div><p>Finally, the generified usage from Java:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">package</span><span class="w"> </span><span class="nn">com.example</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">ClojureJavaInteropGenerics</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">main</span><span class="p">(</span><span class="n">String</span><span class="o">[]</span><span class="w"> </span><span class="n">args</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">RangeIncrementer</span><span class="w"> </span><span class="n">incrementer</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">Computation</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">List</span><span class="o">&lt;</span><span class="n">Long</span><span class="o">&gt;</span><span class="w"> </span><span class="n">incrementedRange</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">incrementer</span><span class="p">.</span><span class="na">incrementRange</span><span class="p">(</span><span class="n">10</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></div><p>Couple of notes for this as well: First the generated class still only returns the raw type (<code>List</code> instead of  <code>List&lt;Integer&gt;</code>). So instead of using the class, use the interface for the variable declaration (<code>RangeIncrementer incrementer = ..</code> instead of <code>Computation comp = ..</code>). The interface will return the non-raw <code>List</code>. Second the function definition for <code>-incrementRange</code> is now slightly different. It needs an additional parameter (<code>this</code>) which exposes the current instance to the generated class/method.</p>
<p>Returning an array of something is also possible with the following construct <code>&quot;[Ljava.lang.Object;&quot;</code>. Need a 2-dim array? Just use <code>&quot;[[Ljava.lang.Object;&quot;</code> (notice the extra <code>[</code>) and so on. However, be aware that the method return types have to match, for example you can&rsquo;t specify a return type of array if your Clojure function does not return an array. In the example above the call to <code>map</code> returns <code>LazySeq</code> which itself is a <code>java.util.List</code>. Therefore, the method declaration is valid, and you won&rsquo;t get any <code>ClassCastException</code> when calling <code>incrementRange</code> from Java.</p>
<h3 id="make-your-life-easier-with-macros">Make your life easier with macros</h3>
<p>Instead of defining every Clojure function which should be exported twice (the real function + the Java wrapper), it is possible to use a macro to do that extra work automatically.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-clojure" data-lang="clojure"><span class="line"><span class="cl"><span class="p">(</span><span class="nf">require</span> <span class="o">&#39;</span><span class="p">[</span><span class="nv">clojure.string</span> <span class="ss">:as</span> <span class="nv">string</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="kd">defn </span><span class="nv">camel-case</span> <span class="p">[</span><span class="nv">input</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">words</span> <span class="p">(</span><span class="nf">string/split</span> <span class="nv">input</span> <span class="o">#</span><span class="s">&#34;[\s_-]+&#34;</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="nf">string/join</span> <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nf">string/lower-case</span> <span class="p">(</span><span class="nb">first </span><span class="nv">words</span><span class="p">))</span> <span class="p">(</span><span class="nb">map </span><span class="nv">string/capitalize</span> <span class="p">(</span><span class="nb">rest </span><span class="nv">words</span><span class="p">))))))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="kd">defn </span><span class="nv">java-name</span> <span class="p">[</span><span class="nv">clojure-name</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">symbol </span><span class="p">(</span><span class="nb">str </span><span class="s">&#34;-&#34;</span> <span class="p">(</span><span class="nf">camel-case</span> <span class="p">(</span><span class="nb">str </span><span class="nv">clojure-name</span><span class="p">)))))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="kd">defmacro </span><span class="nv">defn*</span> <span class="p">[</span><span class="nb">name </span><span class="o">&amp;</span> <span class="nv">declarations</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">java-name</span> <span class="p">(</span><span class="nf">java-name</span> <span class="nv">name</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">    <span class="o">`</span><span class="p">(</span><span class="k">do </span><span class="p">(</span><span class="kd">defn </span><span class="o">~</span><span class="nb">name </span><span class="o">~</span><span class="nv">declarations</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">       <span class="p">(</span><span class="kd">defn </span><span class="o">~</span><span class="nv">java-name</span> <span class="o">~</span><span class="nv">declarations</span><span class="p">))))</span>
</span></span></code></pre></div><p>The macro <code>defn*</code> replaces <code>defn</code> and automatically creates a second function with a valid camel-cased Java method name. The macro is available as a <a href="https://github.com/sebhoss/def-clj">small library</a> at <a href="https://search.maven.org/search?q=g:com.github.sebhoss%20a:def-clj">Maven Central</a>. The macro won&rsquo;t add the extra parameter mentioned above to Java wrapper, so it is only useful for declaring static methods.</p>
<h2 id="using-the-clojure-runtime">Using the Clojure Runtime</h2>
<p>Using <code>gen-class</code> imposes certain limitations on calling Clojure code from Java. One of those are functions which make use of Clojure <a href="https://clojure.org/reference/special_forms#binding-forms">parameter destructuring</a>. To invoke those functions you have to use the Clojure runtime.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">// The Clojure &#39;require&#39; function from the &#39;clojure.core&#39; namespace.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">Var</span><span class="w"> </span><span class="n">require</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">RT</span><span class="p">.</span><span class="na">var</span><span class="p">(</span><span class="s">&#34;clojure.core&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;require&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// Your namespace</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">Symbol</span><span class="w"> </span><span class="n">namespace</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Symbol</span><span class="p">.</span><span class="na">intern</span><span class="p">(</span><span class="s">&#34;DESIRED.NAMESPACE.HERE&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// Your function</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">Var</span><span class="w"> </span><span class="n">function</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">RT</span><span class="p">.</span><span class="na">var</span><span class="p">(</span><span class="s">&#34;DESIRED.NAMESPACE.HERE&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;DESIRED-FUNCTION&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// The required keyword for the above function</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">Keyword</span><span class="w"> </span><span class="n">keyword</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Keyword</span><span class="p">.</span><span class="na">intern</span><span class="p">(</span><span class="s">&#34;REQUIRED-KEYWORD&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// Require/Import your namespace</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">require</span><span class="p">.</span><span class="na">invoke</span><span class="p">(</span><span class="n">namespace</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">// Invoke your function with the given keyword and its value</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">Object</span><span class="w"> </span><span class="n">result</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">function</span><span class="p">.</span><span class="na">invoke</span><span class="p">(</span><span class="n">keyword</span><span class="p">,</span><span class="w"> </span><span class="n">VALUE</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><p>The desired namespace has to be on the classpath for this to work. Alternatively it is possible to load an entire Clojure script, as shown in the following example:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">RT</span><span class="p">.</span><span class="na">loadResourceScript</span><span class="p">(</span><span class="s">&#34;DESIRED/NAMESPACE/HERE.clj&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">RT</span><span class="p">.</span><span class="na">var</span><span class="p">(</span><span class="s">&#34;DESIRED.NAMESPACE.HERE&#34;</span><span class="p">,</span><span class="w"> </span><span class="s">&#34;DESIRED-FUNCTION&#34;</span><span class="p">).</span><span class="na">invoke</span><span class="p">(</span><span class="n">PARAMETER</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><p>On a big project it is properly wise to move Java-&gt;Clojure interop code into helper classes/methods. Look <a href="https://github.com/mikera/clojure-utils/blob/master/src/main/java/mikera/cljutils/Clojure.java">here</a> for an example.</p>
]]></content><category scheme="https://seb.xn--ho-hia.de/categories/snippet" term="snippet" label="snippet"/><category scheme="https://seb.xn--ho-hia.de/tags/clojure" term="clojure" label="clojure"/><category scheme="https://seb.xn--ho-hia.de/tags/java" term="java" label="java"/><category scheme="https://seb.xn--ho-hia.de/tags/interoperability" term="interoperability" label="interoperability"/></entry></feed>